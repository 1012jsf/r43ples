R43ples - Revision Management for the Semantic Web
==================================================

author: Stephan Hensel, Markus Graube


This project provides a service for revision management of named graphs in a triple store.
The service can be interconnected in front of an existing SPARQL endpoint of a Triple Store. 
This service in the associated Triple Store creates and manages a revision management of graphs. 
It provides a SPARQL endpoint where all queries have to be directed to. 
The SPARQL query defines whether only a revision is queried, or a new revision needs to be created. 
Furthermore, the service provides an interface for revision management and the import or export of data from the Computer Aided Engineering tools.


SPARQL endpoint is available at:

[uri]:[port]/r43ples/sparql?query=[]&format=(HTML|JSON)

Administrator-Interface starts automatically with the service.


There is a configuration file named Service.conf where all parameters are configured.


Directory:
javadoc - Javadoc of the service (generated by 'ant javadoc')
lib - used libs
resources - contains configuration files
src - source code
TestData - data for verification and tests
Verification - HTML page which executes SPARQL queries



JMeter
------
jmeter -Jsample_variables=dataset,revision &



Algorithmus
-----------
For each named graph 'g' in a query, a temporary graph 'TempGraph_g_r' is generated for the specified revision 'r' according to this formula ('g_x' = full materialized revision 'x' of graph 'g'):
    TempGraph_g_r = g_nearestBranch + SUM[revision i= nearestBranch to r]( deleteSet_g_i - addSet_g_i )
    
def select_query(query_string):
    for (graph,revision) in query_string.get_named_graphs_and_revisions():   
        execQuery("COPY GRAPH <"+graph+"> TO GRAPH <tmp-"+graph+"-"+revision+">")
        for rev in graph.find_shortest_path_to_revision(revision):    # from nearestBranch to desired revision
            execQuery("REMOVE GRAPH "+ rev.add_set_graph+" FROM GRAPH <tmp-"+graph+"-"+revision+">")
            execQuery("ADD GRAPH "+ rev.delete_set_graph+" TO GRAPH <tmp-"+graph+"-"+revision+">")
        query_string.replace(graph, "tmp-"+graph+"-"+revision)
    result = execQuery(query_string)
    execQuery("DROP GRAPH <tmp-*>")
    return result
    
def update_query(query_string):
	for (graph,revision) in query_string.get_named_graphs_and_revisions():
		newRevision = revision +1
		execQuery("ADD GRAPH "+ rev.delete_set_graph+" TO GRAPH <tmp-"+graph+"-"+revision+">")
		...
	