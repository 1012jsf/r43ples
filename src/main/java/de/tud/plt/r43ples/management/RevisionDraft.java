package de.tud.plt.r43ples.management;

import de.tud.plt.r43ples.exception.InternalErrorException;
import de.tud.plt.r43ples.existentobjects.Revision;
import de.tud.plt.r43ples.triplestoreInterface.TripleStoreInterface;
import de.tud.plt.r43ples.triplestoreInterface.TripleStoreInterfaceSingleton;
import org.apache.log4j.Logger;

/**
 * Collection of information for creating a new revision
 *
 * @author Markus Graube
 * @author Stephan Hensel
 *
 */
public class RevisionDraft {

    /** The logger. **/
    private Logger logger = Logger.getLogger(RevisionDraft.class);
    /** The revision identifier of the revision from which the new one should be derive from. **/
    private String derivedFromRevisionIdentifier;
    /** The derived from identifier. (The revision identifier of the revision or the reference identifier from which the new revision should be derive from.) **/
    private String derivedFromIdentifier;
    /** The revision identifier of the revision which should be created. **/
    private String newRevisionIdentifier;
    /** The revision URI. **/
    private String revisionURI;
    /** The ADD set URI. */
    private String addSetURI;
    /** The DELETE set URI. */
    private String deleteSetURI;
    /** The referenced full graph. **/
    private String referenceFullGraph;
    /** The add set as N-Triples. **/
    private String addSet;
    /** The delete set as N-Triples. **/
    private String deleteSet;

    /** The revision graph URI. */
    private String revisionGraphURI;
    /** The corresponding revision graph. */
    private RevisionGraph revisionGraph;

    // Dependencies
    /** The triple store interface to use. **/
    private TripleStoreInterface tripleStoreInterface;


    /**
     * The constructor. Add and delete sets can be specified which are associated with this revision.
     *
     * @param revisionGraph the revision graph
     * @param derivedFromIdentifier the revision identifier of the revision or the reference identifier from which the new revision should be derive from
     * @param addSet the add set of the revision as N-Triples
     * @param deleteSet the delete set of the revision as N-Triples
     * @throws InternalErrorException
     */
    public RevisionDraft(RevisionGraph revisionGraph, String derivedFromIdentifier, String addSet, String deleteSet) throws InternalErrorException {
        // Dependencies
        this.tripleStoreInterface = TripleStoreInterfaceSingleton.get();

        this.revisionGraph = revisionGraph;
        this.revisionGraphURI = this.revisionGraph.getRevisionGraphUri();
		this.derivedFromRevisionIdentifier = revisionGraph.getRevisionIdentifier(derivedFromIdentifier);
		this.derivedFromIdentifier = derivedFromIdentifier;
     	this.newRevisionIdentifier = revisionGraph.getNextRevisionIdentifier();
     	this.revisionURI = revisionGraph.getGraphName() + "-revision-" + newRevisionIdentifier;
		
		this.addSetURI = revisionGraph.getGraphName() + "-addSet-" + newRevisionIdentifier;
		this.deleteSetURI = revisionGraph.getGraphName() + "-deleteSet-" + newRevisionIdentifier;
		this.referenceFullGraph = revisionGraph.getReferenceGraph(derivedFromIdentifier);

		this.addSet = addSet;
		this.deleteSet = deleteSet;
	}

    /**
     * The constructor. Add and delete sets must be generated by commit.
     *
     * @param revisionGraph the revision graph
     * @param derivedFromIdentifier the revision identifier of the revision or the reference identifier from which the new revision should be derive from
     * @throws InternalErrorException
     */
    public RevisionDraft(RevisionGraph revisionGraph, String derivedFromIdentifier) throws InternalErrorException {
        // Dependencies
        this.tripleStoreInterface = TripleStoreInterfaceSingleton.get();

        this.revisionGraph = revisionGraph;
        this.revisionGraphURI = this.revisionGraph.getRevisionGraphUri();
        this.derivedFromRevisionIdentifier = revisionGraph.getRevisionIdentifier(derivedFromIdentifier);
        this.derivedFromIdentifier = derivedFromIdentifier;
        this.newRevisionIdentifier = revisionGraph.getNextRevisionIdentifier();
        this.revisionURI = revisionGraph.getGraphName() + "-revision-" + newRevisionIdentifier;

        this.addSetURI = revisionGraph.getGraphName() + "-addSet-" + newRevisionIdentifier;
        this.deleteSetURI = revisionGraph.getGraphName() + "-deleteSet-" + newRevisionIdentifier;
        this.referenceFullGraph = revisionGraph.getReferenceGraph(derivedFromIdentifier);

        this.addSet = null;
        this.deleteSet = null;
    }

    /**
     * Creates the revision draft as a new revision in the triplestore and updates the referenced full graph.
     *
     * @return the created revision
     */
    public Revision createRevisionInTripleStore() throws InternalErrorException {
        logger.info("Create new revision for graph " + revisionGraph.getGraphName() + ".");

        if (addSet!=null && !addSet.isEmpty()) {
            // Update full graph of branch
            RevisionManagement.executeINSERT(referenceFullGraph, addSet);

            // Create new graph with addSet-newRevisionNumber
            logger.debug("Create new graph with name " + addSetURI + ".");
            tripleStoreInterface.executeUpdateQuery(String.format("CREATE SILENT GRAPH <%s>%n", addSetURI));
            RevisionManagement.executeINSERT(addSetURI, addSet);
        }

        if (deleteSet!=null && !deleteSet.isEmpty()) {
            // Update full graph of branch
            RevisionManagement.executeDELETE(referenceFullGraph, deleteSet);

            // Create new graph with deleteSet-newRevisionNumber
            logger.debug("Create new graph with name " + deleteSetURI + ".");
            tripleStoreInterface.executeUpdateQuery(String.format("CREATE SILENT GRAPH <%s>%n", deleteSetURI));
            RevisionManagement.executeINSERT(deleteSetURI, deleteSet);
        }

        return new Revision(revisionGraph, newRevisionIdentifier, revisionURI, addSetURI, deleteSetURI);
    }

    /**
     * Checks if this revision draft is equal to another one.
     *
     * @param graphName the graph name
     * @param revisionIdentifier the revision identifier
     * @return true if the revision is equal
     * @throws InternalErrorException
     */
    public boolean equals(final String graphName, final String revisionIdentifier) throws InternalErrorException{
		RevisionGraph otherGraph = new RevisionGraph(graphName);
		String otherRevisionNumber = otherGraph.getRevisionIdentifier(revisionIdentifier);
		return ((this.revisionGraph.getGraphName().equals(graphName)) && (this.derivedFromRevisionIdentifier.equals(otherRevisionNumber)));
	}

    /**
     * Get the add set URI.
     *
     * @return the add set URI
     */
    public String getAddSetURI() {
        return addSetURI;
    }

    /**
     * Get the delete set URI.
     *
     * @return the delete set URI
     */
    public String getDeleteSetURI() {
        return deleteSetURI;
    }

    /**
     * Get the revision graph.
     *
     * @return the revision graph
     */
    public RevisionGraph getRevisionGraph() {
        return revisionGraph;
    }

    /**
     * Get the revision URI.
     *
     * @return the revision URI
     */
    public String getRevisionURI() {
        return revisionURI;
    }

    /**
     * Get the new revision identifier.
     *
     * @return the new revision identifier
     */
    public String getNewRevisionIdentifier() {
        return newRevisionIdentifier;
    }

    /**
     * Get the derived from revision identifier.
     *
     * @return the derived from revision identifier
     */
    public String getDerivedFromRevisionIdentifier() {
        return derivedFromRevisionIdentifier;
    }

    /**
     * Get the derived from identifier. (The revision identifier of the revision or the reference identifier from which the new revision should be derive from.)
     *
     * @return the derived from identifier
     */
    public String getDerivedFromIdentifier() {
        return derivedFromIdentifier;
    }

    /**
     * Get the referenced full graph.
     *
     * @return the referenced full graph
     */
    public String getReferenceFullGraph() {
        return referenceFullGraph;
    }

}
