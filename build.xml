<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<project basedir="." default="build">

	<!-- Project properties -->
	<property file="build.properties" />

	<path id="classpath">
		<pathelement location="${classes.dir}" />
		<pathelement location="${res.dir}" />
		<fileset dir="${lib.dir}" includes="*.jar" />
	</path>

	<manifestclasspath property="manifest.class.path"
		jarfile="${jar.name}">
		<classpath refid="classpath" />
	</manifestclasspath>

	<target name="clean">
		<delete dir="${build.dir}" />
		<delete dir="${jar.dir}" />
		<delete dir="javadoc" />
		<delete file="${app.name}-${app.version}.zip" />
	</target>

	<target name="init">
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${jar.dir}" />
		<exec errorproperty="" executable="git" failifexecutionfails="false"
			outputproperty="git.commit">
			<arg value="describe" />
			<arg value="--tags" />
			<arg value="--always" />
			<arg value="HEAD" />
		</exec>
		<exec errorproperty="" executable="git" failifexecutionfails="false"
			outputproperty="git.branch">
			<arg value="describe" />
			<arg value="--all" />
		</exec>
	</target>

	<target name="build" depends="init">
		<echo message="${app.name}: ${ant.file}" />
		<javac debug="true" destdir="${classes.dir}" includeantruntime="false">
			<src path="${src.dir}" />
			<src path="${test.dir}" />
			<classpath refid="classpath" />
		</javac>
	</target>

	<target name="run" depends="build">
		<java classname="${main.class}" failonerror="true" fork="true">
			<classpath refid="classpath" />
		</java>
	</target>

	<target name="jar" description="generate a jar file distribution"
		depends="build">
		<jar destfile="${jar.file}">
			<manifest>
				<attribute name="Main-Class" value="${main.class}" />
				<attribute name="Class-Path" value="${manifest.class.path}" />
				<attribute name="Implementation-Version"
					value="${app.version} (${git.branch}:${git.commit})" />
			</manifest>
			<fileset dir="${classes.dir}" />
		</jar>
		<copy todir="${jar.lib.dir}" overwrite="true">
			<fileset dir="${lib.dir}" includes="**" />
		</copy>
		<copy todir="${jar.res.dir}" overwrite="true">
			<fileset dir="${res.dir}" includes="**" />
		</copy>
		<copy todir="${jar.dir}" overwrite="true">
			<filelist dir="${basedir}" files="${dist.files}" />
		</copy>
	</target>

	<target name="run-jar" depends="jar">
		<java jar="${jar.file}" fork="true" />
	</target>

	<target name="zip" depends="jar"
		description="generate zip file including all binaries">
		<zip destfile="${app.name}.zip" basedir="${jar.dir}" />
	</target>

	<target name="javadoc" depends="init" description="generate Javadoc documentation">
		<mkdir dir="javadoc" />
		<javadoc sourcepath="${src.dir}" destdir="javadoc" private="true"
			classpathref="classpath" version="true" author="true"
			windowtitle="${app.name} - Version ${app.version}" doctitle="${app.name} - Version ${app.version} (${git.commit})"
			packagenames="de.tud.plt.r43ples.*">
			<doclet name="org.umlgraph.doclet.UmlGraphDoc" path="lib/UmlGraph.jar">
				<param name="-operations" />
				<param name="-qualify" />
				<param name="-types" />
				<param name="-visibility" />
				<param name="-inferdep" />
				<param name="-inferrel" />
				<param name="-hide" value="java.*" />
				<param name="-collpackages" value="java.util.*" />
				<param name="-postfixpackage" />
				<param name="-link"	value="http://java.sun.com/j2se/1.5.0/docs/guide/javadoc/doclet/spec" />
				<param name="-link" value="http://java.sun.com/j2se/1.5/docs/api" />
			</doclet>
		</javadoc>
		<apply executable="dot" dest="javadoc" parallel="false" verbose="true"
			failonerror="true">
			<arg value="-Tpng" />
			<arg value="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="javadoc" includes="*.dot" />
			<mapper type="glob" from="*.dot" to="*.png" />
		</apply>
	</target>

	<target name="test" depends="build">
		<junit printsummary="yes" fork="true" haltonfailure="on">
			<classpath>
				<path refid="classpath" />
				<pathelement location="${test.dir}/resources" />
			</classpath>
			<formatter type="xml" />
			<formatter type="brief" usefile="false" />
			<batchtest todir="${test.dir}">
				<fileset dir="${test.dir}/src" includes="**/*Test*.java" />
			</batchtest>
		</junit>
	</target>

</project>
